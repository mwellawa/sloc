PROCEDURE "sloc.db::createStoreAddress" (
	in	im_company_code nvarchar(10),
	in	im_store_id		nvarchar(10),
	in	im_street_id	integer,
	in	im_suburb		nvarchar(50),
	in	im_postcode		nvarchar(4),
	in	im_state		nvarchar(3),
	in	im_remarks		nvarchar(125),
	in	im_logitude		nvarchar(35),
	in	im_latitude		nvarchar(35),
	out ex_key			integer,
	out	ex_error		nvarchar(100)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	declare v_count integer;
	declare v_company_code varchar(4);
	declare v_store_id varchar(10);
	declare v_state varchar(3);
	declare v_suburb varchar(50);
	
	v_company_code = upper(im_company_code);
	v_store_id = upper(im_store_id);
	v_state = upper(im_state);
	v_suburb = upper(im_suburb);
	
	/* check if company code is valid*/
	select count(*)
	into v_count
	from "sloc.db::model.Company"
	where "company_code" = v_company_code;   
	if v_count > 0 then
		
		/* check if store is valid */
		select count(*)
		into v_count
		from "sloc.db::model.Store"
		where "company_code.company_code" = v_company_code and
			  "store_id" = v_store_id;
		if v_count > 0 then
			
			/* check if state is valid */
			select count(*) 
			into v_count 
			from "sloc.db::model.State"
			where "state" = v_state;	
			if v_count > 0 then
				
				/* check if postcode valid */
				select count(*) 
				into v_count 
				from "sloc.db::model.Postcode"
				where "postcode" = im_postcode and 
					  "state.state" = v_state;
				if v_count > 0 then
					
					/* check if suburb is valid */
					select count(*) 
					into v_count 
					from "sloc.db::model.Suburb"
					where "suburb" = v_suburb and 
						  "postcode.postcode" = im_postcode;
					if v_count > 0 then
						
						/* insert store address */
						INSERT INTO "sloc.db::model.StoreAddress" 
							VALUES(
								v_company_code, 
								v_store_id, 
								im_street_id, 
								v_suburb, 
								im_postcode, 
								v_state, 
								im_remarks, 
								im_logitude, 
								im_latitude);
						ex_key = current_identity_value( );
					else
						ex_error = 'invalid suburb ' || v_suburb;
					end if;
				else
					ex_error = 'invalid postcode ' || im_postcode;
				end if;
			else
				ex_error = 'invalid state ' || v_state;
			end if;
		else
			ex_error = 'invalid store ' || v_store_id;
		end if;
	else
		ex_error = 'invalid company code ' || v_company_code;
	end if;
	
END