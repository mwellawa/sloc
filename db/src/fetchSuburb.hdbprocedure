PROCEDURE "sloc.db::fetchSuburb" ( 
	in	im_suburb		nvarchar(50),
	in	im_postcode		nvarchar(4),
	in	im_create		boolean,
	out	ex_suburb		nvarchar(50),
	out	ex_postcode		nvarchar(4),
	out ex_error		nvarchar(100)	
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   declare v_count integer;
   declare v_suburb_uppper varchar(50);
   
   v_suburb_uppper = upper(im_suburb);
   
	select count(*) 
	into v_count 
	from "sloc.db::model.Postcode"
	where "postcode" = im_postcode;
	if v_count > 0 then
   
		select count(*) 
		into v_count 
		from "sloc.db::model.Suburb"
		where "suburb" = v_suburb_uppper and "postcode.postcode" = im_postcode;
		if v_count > 0 then
			
			select "suburb", "postcode.postcode"
			into ex_suburb, ex_postcode
			from "sloc.db::model.Suburb"
			where "suburb" = v_suburb_uppper and "postcode.postcode" = im_postcode;
			
		else
			
			if im_create = true then
				
				insert into "sloc.db::model.Suburb" values(v_suburb_uppper, im_postcode);
				select count(*) 
				into v_count 
				from "sloc.db::model.Suburb"
				where "suburb" = v_suburb_uppper and "postcode.postcode" = im_postcode;				
				if v_count > 0 then
				
					select "suburb", "postcode.postcode"
					into ex_suburb, ex_postcode
					from "sloc.db::model.Suburb"
					where "suburb" = v_suburb_uppper and "postcode.postcode" = im_postcode;
					
				else
					ex_error = 'error inserting suburb ' || v_suburb_uppper || ' for postcode ' || im_postcode;
				end if;
			else
				ex_error = 'suburb ' || v_suburb_uppper || ' does not exist for postcode ' || im_postcode;
			end if;
		end if;
	else
		ex_error = 'invalid postcode ' || im_postcode;
	end if;
	
END